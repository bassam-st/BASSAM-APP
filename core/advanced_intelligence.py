"""
ูุญุฏุฉ ุงูุฐูุงุก ุงููุชูุฏู ูุจุณุงู
ุชุญุชูู ุนูู ุงูุฐูุงุก ุงููุบูู ูุงูุนุงุทูู ูุงูุชูุฎูุต ุงููุชูุฏู
"""

import re
import random
from typing import Dict, List, Optional, Any, Tuple
from core.utils import is_arabic, normalize_text

class AdvancedIntelligence:
    """ูุญุฑู ุงูุฐูุงุก ุงููุชูุฏู ููุจุญุซ ูุงูุชูุฎูุต ูุงูุฐูุงุก ุงูุนุงุทูู"""
    
    def __init__(self):
        self.emotion_patterns = self._load_emotion_patterns()
        self.question_patterns = self._load_question_patterns()
        self.context_templates = self._load_context_templates()
        
    def _load_emotion_patterns(self) -> Dict[str, List[str]]:
        """ุชุญููู ุฃููุงุท ุงููุดุงุนุฑ"""
        return {
            'positive': [
                'ุดูุฑุง', 'ููุชุงุฒ', 'ุฑุงุฆุน', 'ุฌููู', 'ุฃุญุจู', 'ุณุนูุฏ', 'ูุฑุญ', 'ุญูู', 'ุนุธูู', 
                'ุฑุงุฆุน', 'ููุชุน', 'ูููุฏ', 'ูุฌุญ', 'ูุฌุงุญ', 'ูุงุฒ', 'ููุฒ', 'ุฃูุถู'
            ],
            'negative': [
                'ุฒุนูุงู', 'ุญุฒูู', 'ุตุนุจ', 'ูุดููุฉ', 'ุฎุทุฃ', 'ุบูุท', 'ูุดู', 'ุณูุก', 
                'ุตุนูุจุฉ', 'ุชุนุจ', 'ูุชุนุจ', 'ูุดุงูู', 'ุฎุงูู', 'ูููุงู', 'ูููู'
            ],
            'help_request': [
                'ุณุงุนุฏูู', 'ูุณุงุนุฏุฉ', 'ุฃุฑูุฏ', 'ุฃุญุชุงุฌ', 'ูู ูุถูู', 'ุฑุฌุงุกู', 
                'ูู ุณูุญุช', 'ูููู', 'ุนุงูุฒ', 'ุฃูุฏุฑ', 'ููู'
            ],
            'confusion': [
                'ูุง ูููุช', 'ูุด ูุงูู', 'ุบูุฑ ูุงุถุญ', 'ูุนูุฏ', 'ุตุนุจ ุงูููู', 
                'ูุง ุฃุนุฑู', 'ูุญุชุงุฑ', 'ูุด ุนุงุฑู'
            ],
            'gratitude': [
                'ุดูุฑุง', 'ุดูุฑูุง', 'ูุดููุฑ', 'ุดุงูุฑ', 'ููููู', 'ุฃุดูุฑู', 
                'ุฌุฒุงู ุงููู ุฎูุฑ', 'ุจุงุฑู ุงููู ููู'
            ]
        }
    
    def _load_question_patterns(self) -> Dict[str, List[str]]:
        """ุชุญููู ุฃููุงุท ุงูุฃุณุฆูุฉ"""
        return {
            'definition': ['ูุง ูู', 'ูุง ูู', 'ูุงูู', 'ูุงูู', 'ุนุฑู', 'ุชุนุฑูู', 'ูุนูู'],
            'explanation': ['ููู', 'ุงุดุฑุญ', 'ูุถุญ', 'ูุณุฑ', 'ุจูู', 'ุฃุนุทูู', 'ุนูููู'],
            'reason': ['ููุงุฐุง', 'ููุด', 'ุงูุณุจุจ', 'ูุฃู', 'ุนูู', 'ูุง ุงูุณุจุจ'],
            'location': ['ุฃูู', 'ููู', 'ููุงู', 'ูููุน', 'ููุงููุง', 'ูููุนูุง'],
            'time': ['ูุชู', 'ููุช', 'ุชุงุฑูุฎ', 'ุฒูู', 'ุณูุฉ', 'ููู', 'ุณุงุนุฉ'],
            'person': ['ูู', 'ููู', 'ุดุฎุต', 'ุฅูุณุงู', 'ุฑุฌู', 'ุงูุฑุฃุฉ'],
            'quantity': ['ูู', 'ุนุฏุฏ', 'ููุฏุงุฑ', 'ุญุฌู', 'ูููุฉ', 'ูุณุงุญุฉ'],
            'yes_no': ['ูู', 'ุฃ', 'ูุง ุชุฑู', 'ูููู', 'ุตุญูุญ', 'ุฎุทุฃ'],
            'comparison': ['ุฃูููุง', 'ุฃูุถู', 'ุงููุฑู', 'ููุงุฑูุฉ', 'ุงุฎุชูุงู', 'ุฃุญุณู'],
            'mathematical': ['ุงุญุณุจ', 'ุญู', 'ูุดุชู', 'ุชูุงูู', 'ูุนุงุฏูุฉ', 'ุฑูุงุถูุฉ', '+', '-', '*', '/', '=', '^']
        }
    
    def _load_context_templates(self) -> Dict[str, str]:
        """ุชุญููู ููุงูุจ ุงูุณูุงู"""
        return {
            'definition': """ุฃูุช ุฎุจูุฑ ุชุนูููู ูุชุฎุตุต ูู ุงูุชุนุฑููุงุช. 
            ูุฏู ุชุนุฑููุงู ุดุงููุงู ูููุตูุงู ูุน ุฃูุซูุฉ ูุชูุถูุญุงุช ุนูููุฉ.
            ุงุณุชุฎุฏู ูุบุฉ ุจุณูุทุฉ ููุงุถุญุฉ ูุน ุงูุชุฏุฑุฌ ูู ุงูุจุณูุท ุฅูู ุงููุนูุฏ.""",
            
            'explanation': """ุฃูุช ูุนูู ูุงูุฑ ูุชุฎุตุต ูู ุงูุดุฑุญ ูุงูุชูุถูุญ.
            ุงุดุฑุญ ุจุงูุชูุตูู ูุงูุฎุทูุงุช ูุน ุงุณุชุฎุฏุงู ุฃูุซูุฉ ูุชุดุจููุงุช ูููููุฉ.
            ูุณู ุงูุฅุฌุงุจุฉ ุฅูู ููุงุท ูุงุถุญุฉ ููุฑุชุจุฉ ููุทููุงู.""",
            
            'reason': """ุฃูุช ูุญูู ุนููู ูุชุฎุตุต ูู ุชูุณูุฑ ุงูุฃุณุจุงุจ ูุงูุนูุงูู.
            ูุถุญ ุงูุฃุณุจุงุจ ูุงูุนูุงูู ุงููุคุซุฑุฉ ุจุดูู ููุทูู ูููุตู.
            ุงุฑุจุท ุงูุฃุณุจุงุจ ุจุงููุชุงุฆุฌ ููุฏู ุงูุณูุงู ุงููุงูู.""",
            
            'location': """ุฃูุช ุฌุบุฑุงูู ุฎุจูุฑ ูุชุฎุตุต ูู ุงููุนูููุงุช ุงูููุงููุฉ.
            ุญุฏุฏ ุงูููุงู ุจุฏูุฉ ูุน ูุตู ุงููููุน ูุงููุนูููุงุช ุงูุฌุบุฑุงููุฉ ุงููููุฉ.
            ุงุฐูุฑ ุงูููุงุทู ุงููุญูุทุฉ ูุงูุฎุตุงุฆุต ุงูุฌุบุฑุงููุฉ.""",
            
            'mathematical': """ุฃูุช ุฃุณุชุงุฐ ุฑูุงุถูุงุช ุฎุจูุฑ ููุชุฎุตุต ูู ุชุนููู ุงูุฑูุงุถูุงุช.
            ุงุดุฑุญ ุงูุญู ุฎุทูุฉ ุจุฎุทูุฉ ุจุทุฑููุฉ ูุงุถุญุฉ ูููุตูุฉ.
            ุงุณุชุฎุฏู ุงูุชุจุณูุท ูุงูุชูุถูุญ ูู ูู ุฎุทูุฉ.""",
            
            'general': """ุฃูุช ุจุณุงู ุงูุฐูู ๐คุ ูุณุงุนุฏ ุฐูู ุนุฑุจู ูุชูุฏู ูุน ูุฏุฑุงุช ุนุงุทููุฉ ููุบููุฉ ุนุงููุฉ.
            ูุฏู ุฅุฌุงุจุฉ ูุชูุงููุฉ ูููุตูุฉ ูุดุงููุฉ ุชุบุทู ุฌูุงูุจ ุงูููุถูุน ุงููุฎุชููุฉ."""
        }
    
    def detect_question_type(self, question: str) -> str:
        """ูุดู ููุน ุงูุณุคุงู ุจุฏูุฉ ุนุงููุฉ"""
        question_lower = question.lower().strip()
        
        # ุฅุฒุงูุฉ ุนูุงูุงุช ุงูุชุฑููู ููุชุญููู ุงูุฃูุถู
        clean_question = re.sub(r'[^\w\s]', ' ', question_lower)
        
        # ูุญุต ูู ููุน ูู ุงูุฃุณุฆูุฉ
        for q_type, patterns in self.question_patterns.items():
            for pattern in patterns:
                if pattern in clean_question:
                    return q_type
        
        return 'general'
    
    def detect_emotion(self, text: str) -> Tuple[str, float]:
        """ูุดู ุงููุดุงุนุฑ ูุน ุฏุฑุฌุฉ ุงูุซูุฉ"""
        text_lower = text.lower().strip()
        clean_text = re.sub(r'[^\w\s]', ' ', text_lower)
        
        emotion_scores = {}
        
        # ุญุณุงุจ ุฏุฑุฌุงุช ุงููุดุงุนุฑ
        for emotion, patterns in self.emotion_patterns.items():
            score = 0
            for pattern in patterns:
                # ุนุฏุฏ ูุฑุงุช ุงูุธููุฑ ูุน ูุฒู
                occurrences = len(re.findall(r'\b' + pattern + r'\b', clean_text))
                score += occurrences
            
            if score > 0:
                # ุชุทุจูุน ุงููุชูุฌุฉ
                emotion_scores[emotion] = score / len(patterns)
        
        if emotion_scores:
            # ุฃููู ูุดุงุนุฑ
            dominant_emotion = max(emotion_scores, key=emotion_scores.get)
            confidence = emotion_scores[dominant_emotion]
            return dominant_emotion, confidence
        
        return 'neutral', 0.0
    
    def generate_emotional_response(self, emotion: str, confidence: float) -> str:
        """ุชูููุฏ ุฑุฏ ุนุงุทูู ููุงุณุจ"""
        if confidence < 0.3:  # ุซูุฉ ููุฎูุถุฉ
            return ""
        
        responses = {
            'positive': [
                '๐ ุฃุณุนุฏูู ุฃูู ุฑุงุถู! ููู ูููููู ูุณุงุนุฏุชู ุฃูุซุฑุ',
                '๐ ุฑุงุฆุน! ุฃูุง ุณุนูุฏ ูุฃููู ุฃุณุชุทูุน ูุณุงุนุฏุชู.',
                'โค๏ธ ุดูุฑุงู ูู! ุฃุดุนุฑ ุจุงููุฎุฑ ุนูุฏูุง ุฃุณุงุนุฏู.',
                '๐ ููุชุงุฒ! ุฏุนูู ุฃูุฏู ูู ุงููุฒูุฏ ูู ุงููุณุงุนุฏุฉ.'
            ],
            'negative': [
                '๐ ุฃุนุชุฐุฑ ุฅุฐุง ูุงู ููุงู ุฃู ุฅุฒุนุงุฌ. ุฏุนูู ุฃุณุงุนุฏู ุจุดูู ุฃูุถู.',
                '๐ ุฃุชููู ุดุนูุฑู. ุณุฃุจุฐู ูุตุงุฑู ุฌูุฏู ููุณุงุนุฏุชู.',
                '๐ค ูุง ุชูููุ ุณูุญู ุงููุดููุฉ ูุนุงู ุฎุทูุฉ ุจุฎุทูุฉ.',
                '๐ช ุฃููู ุงูุตุนูุจุฉ. ุฏุนูู ุฃูุฏู ูู ุญูููุงู ูุจุณุทุฉ ููุงุถุญุฉ.'
            ],
            'help_request': [
                '๐โโ๏ธ ุจุงูุทุจุน! ุฃูุง ููุง ููุณุงุนุฏุชู. ูุง ุงูุฐู ุชุญุชุงุฌ ุฅูููุ',
                'โ ุฃููุฏ! ุฃุฎุจุฑูู ุจุงูุชูุตูู ููู ูููููู ูุณุงุนุฏุชู.',
                '๐ช ูุนุงู ุณูุฌุฏ ุงูุญู! ุงุทุฑุญ ุณุคุงูู ุจูุถูุญ.',
                '๐ฏ ุชูุงู! ุฃูุง ุฌุงูุฒ ูุชูุฏูู ุฃูุถู ูุณุงุนุฏุฉ ููููุฉ.'
            ],
            'confusion': [
                '๐ค ุฏุนูู ุฃูุถุญ ุงูุฃูุฑ ุจุทุฑููุฉ ุฃุจุณุท ูุฃูุถุญ.',
                '๐ก ุณุฃุดุฑุญ ูู ุจุชูุตูู ุฃูุจุฑ ููุถูุญ ุฃูุซุฑ.',
                '๐ ูุง ูุดููุฉ! ุณุฃุนูุฏ ุงูุดุฑุญ ุจุทุฑููุฉ ูุฎุชููุฉ ููุจุณุทุฉ.',
                '๐ ุฏุนูู ุฃุนุทูู ุดุฑุญุงู ููุตูุงู ูุฃูุซูุฉ ูุงุถุญุฉ.'
            ],
            'gratitude': [
                '๐ฅฐ ุงูุนูู! ุฃูุง ุณุนูุฏ ุฌุฏุงู ูุฃููู ุณุงุนุฏุชู.',
                '๐ ูุง ุดูุฑ ุนูู ูุงุฌุจ! ูุฐุง ุนููู ูุฃุญุจู.',
                '๐ ุชุณูู! ุฃู ููุช ุชุญุชุงุฌ ูุณุงุนุฏุฉ ุฃูุง ููุง.',
                'โค๏ธ ุงููู ูุนุทูู ุงูุนุงููุฉ! ุฏุงุฆูุงู ูู ุฎุฏูุชู.'
            ]
        }
        
        if emotion in responses:
            return random.choice(responses[emotion])
        
        return ""
    
    def analyze_text_complexity(self, text: str) -> str:
        """ุชุญููู ุชุนููุฏ ุงููุต ูุชุญุฏูุฏ ูุณุชูู ุงูุฅุฌุงุจุฉ ุงููุทููุจ"""
        word_count = len(text.split())
        technical_terms = len(re.findall(r'\b(?:ุชููู|ุนููู|ุชูููููุฌูุง|ุจุฑูุฌุฉ|ููุฏุณุฉ|ุทุจ|ููุฒูุงุก|ููููุงุก|ุฑูุงุถูุงุช)\b', text.lower()))
        
        if word_count < 5:
            return 'simple'
        elif word_count < 15 and technical_terms == 0:
            return 'medium'
        else:
            return 'advanced'
    
    def create_enhanced_context(self, question: str, question_type: str, emotion: str) -> str:
        """ุฅูุดุงุก ุณูุงู ูุญุณู ููุณุคุงู"""
        base_context = self.context_templates.get(question_type, self.context_templates['general'])
        complexity = self.analyze_text_complexity(question)
        
        # ุชุฎุตูุต ุงูุณูุงู ุญุณุจ ุงูุชุนููุฏ
        complexity_additions = {
            'simple': "ุงุณุชุฎุฏู ูุบุฉ ุจุณูุทุฉ ุฌุฏุงู ูููุฑุฏุงุช ุณููุฉ. ูุฏู ุฃูุซูุฉ ูู ุงูุญูุงุฉ ุงูููููุฉ.",
            'medium': "ุงุณุชุฎุฏู ูุบุฉ ูุชูุณุทุฉ ุงูุชุนููุฏ ูุน ุดุฑุญ ุงููุตุทูุญุงุช ุงูุตุนุจุฉ.",
            'advanced': "ููููู ุงุณุชุฎุฏุงู ุงููุตุทูุญุงุช ุงูุชูููุฉ ูุน ุชูุถูุญูุง ุจุงูุชูุตูู."
        }
        
        # ุฅุถุงูุฉ ุงูุชูุฌููุงุช ุงูุนุงุทููุฉ
        emotional_guidance = {
            'help_request': "ูู ุฅูุฌุงุจูุงู ููุดุฌุนุงู ูู ุฑุฏู.",
            'confusion': "ูู ุตุจูุฑุงู ููุถุญ ุงูุฃููุฑ ุจุทุฑู ูุชุนุฏุฏุฉ.",
            'negative': "ูู ูุฑูุญุงู ููุทูุฆูุงู ูู ุฃุณููุจู.",
            'positive': "ุดุงุฑู ุงูุฅูุฌุงุจูุฉ ูุงุณุชูุฑ ูู ุชูุฏูู ุงูุฃูุถู."
        }
        
        enhanced_context = f"""
{base_context}

ูุณุชูู ุงูุชุนููุฏ ุงููุทููุจ: {complexity_additions[complexity]}

{emotional_guidance.get(emotion, "")}

ูุจุงุฏุฆ ุงูุฅุฌุงุจุฉ ุงููุชูุฏูุฉ:
- ุงุจุฏุฃ ุจุฅุฌุงุจุฉ ูุฎุชุตุฑุฉ ุซู ูุตู
- ุงุณุชุฎุฏู ุงูุชูุณูู ูุงูุชุฑููู ูุชูุธูู ุงููุนูููุงุช  
- ุฃุถู ุฃูุซูุฉ ุนูููุฉ ูู ุงููุงูุน ุงูุนุฑุจู
- ุงุฎุชุชู ุจุณุคุงู ูููุชุงุจุนุฉ ุฃู ุงูุชุฑุงุญ ููุชูุณุน
- ุงุณุชุฎุฏู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ ุจุญููุฉ ูุฅุถุงูุฉ ุงูุญูููุฉ
- ูุฏู ูุฑุงุฌุน ุฃู ูุตุงุฏุฑ ุฅุถุงููุฉ ุนูุฏ ุงูุฅููุงู
"""
        
        return enhanced_context
    
    def create_detailed_summary(self, content: str, max_sentences: int = 5) -> str:
        """ุฅูุดุงุก ุชูุฎูุต ููุตู ูููุธู"""
        if not content or len(content.strip()) < 100:
            return content
        
        # ุชูุณูู ุงููุญุชูู ุฅูู ุฌูู
        sentences = re.split(r'[.!?]+', content)
        sentences = [s.strip() for s in sentences if s.strip() and len(s.strip()) > 10]
        
        if len(sentences) <= max_sentences:
            return content
        
        # ุงุฎุชูุงุฑ ุงูุฌูู ุงููููุฉ (ุฃูู ุฌููุฉุ ุฌูู ุชุญุชูู ุนูู ูููุงุช ููุชุงุญูุฉุ ุขุฎุฑ ุฌููุฉ)
        important_sentences = []
        
        # ุงูุฌููุฉ ุงูุฃููู ุฏุงุฆูุงู
        if sentences:
            important_sentences.append(sentences[0])
        
        # ุงูุจุญุซ ุนู ุฌูู ุชุญุชูู ุนูู ูููุงุช ููุชุงุญูุฉ
        keywords = ['ููู', 'ุฃุณุงุณู', 'ุฑุฆูุณู', 'ูุฌุจ', 'ุถุฑูุฑู', 'ุฃููุงู', 'ุซุงููุงู', 'ุฃุฎูุฑุงู', 'ุฎูุงุตุฉ', 'ูุชูุฌุฉ']
        for sentence in sentences[1:-1]:
            if any(keyword in sentence for keyword in keywords) and len(important_sentences) < max_sentences - 1:
                important_sentences.append(sentence)
        
        # ุงูุฌููุฉ ุงูุฃุฎูุฑุฉ ุฅุฐุง ูุงู ููุงู ูุณุงุญุฉ
        if len(sentences) > 1 and len(important_sentences) < max_sentences:
            important_sentences.append(sentences[-1])
        
        return '. '.join(important_sentences) + '.'
    
    def generate_follow_up_questions(self, topic: str, question_type: str) -> List[str]:
        """ุชูููุฏ ุฃุณุฆูุฉ ูุชุงุจุนุฉ ุฐููุฉ"""
        follow_ups = {
            'definition': [
                f'ูู ุชุฑูุฏ ุฃูุซูุฉ ุฃูุซุฑ ุนู {topic}ุ',
                f'ูุง ุฑุฃูู ูู ูุนุฑูุฉ ุชุทุจููุงุช {topic} ุงูุนูููุฉุ',
                f'ูู ุชุญุจ ุฃู ูุชุญุฏุซ ุนู ุชุงุฑูุฎ {topic}ุ'
            ],
            'explanation': [
                f'ูู ุงูุดุฑุญ ูุงุถุญ ุฃู ุชุญุชุงุฌ ุชูุตูู ุฃูุซุฑ ูู ููุทุฉ ูุนููุฉุ',
                f'ุชุญุจ ูุดูู ุฃูุซูุฉ ุฅุถุงููุฉ ุนูู {topic}ุ',
                f'ููู ุฌุฒุก ูุนูู ูู ุงูุดุฑุญ ุชุญุชุงุฌ ุชูุถูุญ ุฃูุชุฑ ูููุ'
            ],
            'mathematical': [
                'ูู ุชุฑูุฏ ุญู ูุณุงุฆู ูุดุงุจูุฉุ',
                'ุชุญุจ ุฃุดุฑุญ ูู ุทุฑููุฉ ุฃุฎุฑู ูุญู ููุณ ุงูููุนุ',
                'ุนูุฏู ุฃุณุฆูุฉ ุนูู ุฎุทูุงุช ุงูุญูุ'
            ],
            'general': [
                f'ูู ููุงู ุฌุงูุจ ูุนูู ูู {topic} ุชุฑูุฏ ุงูุชูุณุน ูููุ',
                'ุฃู ูุนูููุฉ ุฅุถุงููุฉ ุชุญุชุงุฌูุงุ',
                'ูู ุงูุฅุฌุงุจุฉ ุฃุฌุงุจุช ุนูู ุณุคุงูู ุจุงููุงููุ'
            ]
        }
        
        return follow_ups.get(question_type, follow_ups['general'])
    
    def enhance_arabic_text(self, text: str) -> str:
        """ุชุญุณูู ุงููุต ุงูุนุฑุจู ูููุฑุงุกุฉ ูุงูููู"""
        if not text:
            return text
        
        # ุฅุถุงูุฉ ุงูุชุดููู ูููููุงุช ุงููููุฉ
        important_words = {
            'ุงููู': 'ุงูููู',
            'ูุญูุฏ': 'ูุญูุฏู',
            'ุงููุฑุงู': 'ุงููุฑุขู',
            'ุงูุงุณูุงู': 'ุงูุฅุณูุงู'
        }
        
        enhanced_text = text
        for word, enhanced in important_words.items():
            enhanced_text = re.sub(rf'\b{word}\b', enhanced, enhanced_text, flags=re.IGNORECASE)
        
        # ุชุญุณูู ุนูุงูุงุช ุงูุชุฑููู
        enhanced_text = re.sub(r'([.!?])\s*', r'\1 ', enhanced_text)  # ูุณุงูุฉ ุจุนุฏ ุนูุงูุงุช ุงูุชุฑููู
        enhanced_text = re.sub(r'\s+', ' ', enhanced_text)  # ุฅุฒุงูุฉ ุงููุณุงูุงุช ุงูุฒุงุฆุฏุฉ
        enhanced_text = enhanced_text.strip()
        
        return enhanced_text