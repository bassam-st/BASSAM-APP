"""
ูุญุฏุฉ ูุญุฑู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
ุงูุชูุงูู ูุน Gemini API ูุชูููุฑ ุฅุฌุงุจุงุช ุฐููุฉ
"""

import os
import re
from typing import Optional, Dict, Any, List

try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False
    genai = None

from core.utils import is_arabic, normalize_text
from core.advanced_intelligence import AdvancedIntelligence

class AIEngine:
    def __init__(self):
        self.api_key = os.getenv("GEMINI_API_KEY")
        self.model = None
        self.is_available = False
        self.intelligence = AdvancedIntelligence()  # ุฅุถุงูุฉ ุงูุฐูุงุก ุงููุชูุฏู
        
        if GENAI_AVAILABLE and self.api_key:
            try:
                genai.configure(api_key=self.api_key)
                # ุชุฌุฑุจุฉ ุงูููุงุฐุฌ ุงูุญุฏูุซุฉ ุงููุชุงุญุฉ
                try:
                    self.model = genai.GenerativeModel('gemini-1.5-flash')
                except:
                    try:
                        self.model = genai.GenerativeModel('gemini-1.5-pro')
                    except:
                        try:
                            self.model = genai.GenerativeModel('gemini-pro-latest')
                        except:
                            self.model = genai.GenerativeModel('gemini-pro')
                self.is_available = True
            except Exception as e:
                print(f"ุฎุทุฃ ูู ุชููุฆุฉ Gemini: {e}")
                self.is_available = False
    
    def is_gemini_available(self) -> bool:
        """ุงูุชุญูู ูู ุชููุฑ ุฎุฏูุฉ Gemini"""
        return self.is_available
    
    def generate_response(self, prompt: str, context: str = "") -> Optional[str]:
        """ุชูููุฏ ุฑุฏ ุจุงุณุชุฎุฏุงู Gemini"""
        if not self.is_available:
            return None
        
        try:
            # ุชุญุถูุฑ ุงููุต ูุน ุงูุณูุงู
            full_prompt = f"{context}\n\n{prompt}" if context else prompt
            
            # ุฅุฑุณุงู ุงูุทูุจ
            response = self.model.generate_content(full_prompt)
            
            if response and response.text:
                return response.text.strip()
            
            return None
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุชูููุฏ ุงูุฑุฏ: {e}")
            return None
    
    def answer_question(self, question: str) -> Optional[Dict[str, Any]]:
        """ุงูุฅุฌุงุจุฉ ุนูู ุงูุฃุณุฆูุฉ ุงูุนุงูุฉ ูุน ุงูุฐูุงุก ุงููุชูุฏู"""
        if not self.is_available:
            return None
        
        try:
            # ูุดู ููุน ุงูุณุคุงู ูุงููุดุงุนุฑ
            question_type = self.intelligence.detect_question_type(question)
            emotion, confidence = self.intelligence.detect_emotion(question)
            
            # ุฅูุดุงุก ุณูุงู ูุญุณู
            enhanced_context = self.intelligence.create_enhanced_context(question, question_type, emotion)
            
            # ุฅูุดุงุก ุฑุฏ ุนุงุทูู
            emotional_intro = self.intelligence.generate_emotional_response(emotion, confidence)
            
            # ุชุญุถูุฑ ุงูุณุคุงู ูุน ุงูููุฏูุฉ ุงูุนุงุทููุฉ
            if emotional_intro:
                full_question = f"{emotional_intro}\n\n{question}"
            else:
                full_question = question
            
            # ุชุญุถูุฑ ุงููุต ุงูููุงุฆู
            prompt = f"""
ููุน ุงูุณุคุงู: {question_type}
ุงูุณุคุงู: {full_question}

ุฃุฌุจ ุจุดูู ููุตู ูุฐูู ููููุฏ. ุงุฌุนู ุฅุฌุงุจุชู ุดุงููุฉ ูุบููุฉ ุจุงููุนูููุงุช ูุน ุฃูุซูุฉ ูุชูุถูุญุงุช.
"""
            
            # ุชูููุฏ ุงูุฑุฏ
            response = self.generate_response(prompt, enhanced_context)
            
            if response:
                # ุชุญุณูู ุงููุต ุงูุนุฑุจู
                enhanced_response = self.intelligence.enhance_arabic_text(response)
                
                # ุฅุถุงูุฉ ุฃุณุฆูุฉ ูุชุงุจุนุฉ
                follow_up_questions = self.intelligence.generate_follow_up_questions(
                    question, question_type
                )
                
                return {
                    'success': True,
                    'question': question,
                    'answer': enhanced_response,
                    'question_type': question_type,
                    'emotion_detected': emotion,
                    'confidence': confidence,
                    'follow_up_questions': follow_up_questions,
                    'source': 'ุจุณุงู ุงูุฐูู - Gemini AI ุงููุชูุฏู'
                }
            
            return None
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุงูุฅุฌุงุจุฉ ุนูู ุงูุณุคุงู: {e}")
            return None
    
    def explain_math_solution(self, problem: str, solution: str, detailed_steps: Optional[List[str]] = None) -> Optional[str]:
        """ุดุฑุญ ุงูุญููู ุงูุฑูุงุถูุฉ ูุน ุชูุงุตูู ูุชูุฏูุฉ"""
        if not self.is_available:
            return None
        
        try:
            # ุฅูุดุงุก ุณูุงู ูุชูุฏู ููุฑูุงุถูุงุช
            advanced_context = self.intelligence.create_enhanced_context(problem, 'mathematical', 'help_request')
            
            # ุชุญุถูุฑ ุงููุต ูุน ุงูุฎุทูุงุช ุงูููุตูุฉ
            if detailed_steps:
                steps_text = "\n".join([f"- {step}" for step in detailed_steps])
                prompt = f"""
๐งฎ **ุดุฑุญ ูุณุฃูุฉ ุฑูุงุถูุฉ ูุชูุฏู**

๐ **ุงููุณุฃูุฉ:** {problem}
โ **ุงูุญู:** {solution}

๐ง **ุงูุฎุทูุงุช ุงูููุตูุฉ:**
{steps_text}

๐ **ูุทููุจ ููู:**
1. ุงุดุฑุญ ูู ุฎุทูุฉ ุจุทุฑููุฉ ุชุนููููุฉ ูุงุถุญุฉ
2. ุงุฐูุฑ ุงูููุงุนุฏ ุงูุฑูุงุถูุฉ ุงููุณุชุฎุฏูุฉ 
3. ูุฏู ูุตุงุฆุญ ูุชุญุฐูุฑุงุช ูููุฉ
4. ุงูุชุฑุญ ุทุฑู ููุชุญูู ูู ุงูุญู
5. ุฃุนุท ุฃูุซูุฉ ูุดุงุจูุฉ ููุชุฏุฑูุจ

ุงุณุชุฎุฏู ุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุงุถุญุฉ ูุน ุงูุฑููุฒ ุงูุฑูุงุถูุฉ ุงูููุงุณุจุฉ.
                """
            else:
                prompt = f"""
ุงุดุฑุญ ุจุทุฑููุฉ ุชุนููููุฉ ูุชูุฏูุฉ ููููุฉ ุญู ูุฐู ุงููุณุฃูุฉ ุงูุฑูุงุถูุฉ:

ุงููุณุฃูุฉ: {problem}
ุงูุญู: {solution}

ูุฏู ุดุฑุญุงู ุดุงููุงู ูุชุถูู:
- ุงูุฎุทูุงุช ูุฑููุฉ ููุงุถุญุฉ
- ุงูููุงุนุฏ ุงูุฑูุงุถูุฉ ุงููุณุชุฎุฏูุฉ
- ูุตุงุฆุญ ููุชุฐูุฑ ูุงูุชุทุจูู
- ุทุฑู ุงูุชุญูู ูู ุตุญุฉ ุงูุญู
                """
            
            explanation = self.generate_response(prompt, advanced_context)
            
            if explanation:
                return self.intelligence.enhance_arabic_text(explanation)
            
            return explanation
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุดุฑุญ ุงูุญู ุงูุฑูุงุถู: {e}")
            return None
    
    def suggest_related_topics(self, topic: str) -> Optional[list]:
        """ุงูุชุฑุงุญ ููุงุถูุน ุฐุงุช ุตูุฉ"""
        if not self.is_available:
            return None
        
        try:
            prompt = f"""
            ุงูุชุฑุญ 5 ููุงุถูุน ูุฑุชุจุทุฉ ุจู: {topic}
            
            ูุฏู ุงูุงูุชุฑุงุญุงุช ูู ุดูู ูุงุฆูุฉ ูุฑููุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ.
            ุฑูุฒ ุนูู ุงูููุงุถูุน ุงููููุฏุฉ ูุงูุชุนููููุฉ.
            """
            
            response = self.generate_response(prompt)
            
            if response:
                # ุงุณุชุฎุฑุงุฌ ุงููุงุฆูุฉ ูู ุงูุฑุฏ
                lines = response.split('\n')
                suggestions = []
                
                for line in lines:
                    line = line.strip()
                    if line and (line[0].isdigit() or line.startswith('-')):
                        # ุฅุฒุงูุฉ ุงูุฑูู ูุงูุฑููุฒ
                        clean_line = re.sub(r'^[\d\-\.\)\s]+', '', line).strip()
                        if clean_line:
                            suggestions.append(clean_line)
                
                return suggestions[:5]  # ุฃูุตู 5 ุงูุชุฑุงุญุงุช
            
            return None
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุงูุชุฑุงุญ ุงูููุงุถูุน: {e}")
            return None
    
    def translate_to_arabic(self, text: str) -> Optional[str]:
        """ุชุฑุฌูุฉ ุงููุต ุฅูู ุงูุนุฑุจูุฉ"""
        if not self.is_available or is_arabic(text):
            return None
        
        try:
            prompt = f"""
            ุชุฑุฌู ุงููุต ุงูุชุงูู ุฅูู ุงููุบุฉ ุงูุนุฑุจูุฉ ุจุทุฑููุฉ ุฏูููุฉ ููููููุฉ:
            
            {text}
            
            ูุฏู ุงูุชุฑุฌูุฉ ููุท ุจุฏูู ุชูุณูุฑุงุช ุฅุถุงููุฉ.
            """
            
            translation = self.generate_response(prompt)
            return translation
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุงูุชุฑุฌูุฉ: {e}")
            return None
    
    def smart_search_enhancement(self, query: str, search_results: list) -> Optional[str]:
        """ุชุญุณูู ูุชุงุฆุฌ ุงูุจุญุซ ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        if not self.is_available or not search_results:
            return None
        
        try:
            # ุชุญุถูุฑ ููุฎุต ุงููุชุงุฆุฌ
            results_summary = "\n".join([
                f"- {result.get('title', '')}: {result.get('snippet', '')[:100]}..."
                for result in search_results[:3]
            ])
            
            prompt = f"""
            ุจูุงุกู ุนูู ูุชุงุฆุฌ ุงูุจุญุซ ุงูุชุงููุฉ ุนู "{query}":
            
            {results_summary}
            
            ูุฏู ููุฎุตุงู ุดุงููุงู ููููุฏุงู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ูุฌูุจ ุนูู ุงุณุชูุณุงุฑ ุงููุณุชุฎุฏู.
            ุงุฌุนู ุงูููุฎุต ููุธูุงู ููููููุงู ููุชุถูู ุฃูู ุงููุนูููุงุช.
            """
            
            enhanced_summary = self.generate_response(prompt)
            return enhanced_summary
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุชุญุณูู ุงูุจุญุซ: {e}")
            return None

# ุฅูุดุงุก ูุซูู ุนุงู
ai_engine = AIEngine()